<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
    <comp lib="0" loc="(210,290)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(230,250)" name="Clock"/>
    <comp lib="0" loc="(300,310)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(350,330)" name="Pin">
      <a name="appearance" val="classic"/>
    </comp>
    <comp lib="0" loc="(590,270)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(690,250)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="32"/>
    </comp>
    <comp loc="(590,250)" name="cache">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(210,290)" to="(370,290)"/>
    <wire from="(230,250)" to="(370,250)"/>
    <wire from="(300,310)" to="(370,310)"/>
    <wire from="(350,270)" to="(370,270)"/>
    <wire from="(350,330)" to="(370,330)"/>
    <wire from="(590,250)" to="(690,250)"/>
  </circuit>
  <vhdl name="cache">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity cache is
    Port (
        clk : in std_logic;
        reset : in std_logic;
        address : in std_logic_vector(31 downto 0);
        write_data : in std_logic_vector(31 downto 0);
        write_enable : in std_logic;
        read_data : out std_logic_vector(31 downto 0);
        hit : out std_logic
    );
end cache;

architecture Behavioral of cache is
    -- Cache parameters
    constant CACHE_SIZE : integer := 256;  -- Number of sets
    constant ASSOCIATIVITY : integer := 2; -- 2-way associative

    -- Type declarations
    type cache_line is record
        valid : std_logic;
        tag : std_logic_vector(23 downto 0);
        data : std_logic_vector(31 downto 0);
    end record;

    type cache_set is array (0 to ASSOCIATIVITY-1) of cache_line;
    type cache_array is array (0 to CACHE_SIZE-1) of cache_set;

    -- Cache memory
    signal cache : cache_array := (others =&gt; (others =&gt; (valid =&gt; '0', tag =&gt; (others =&gt; '0'), data =&gt; (others =&gt; '0'))));

    -- Internal signals
    signal index : integer range 0 to CACHE_SIZE-1;
    signal tag : std_logic_vector(23 downto 0);
    signal offset : std_logic_vector(1 downto 0);
    signal hit_way : integer range 0 to ASSOCIATIVITY-1;
    signal found : std_logic;
    signal way : integer range 0 to ASSOCIATIVITY-1;

begin
    process(clk, reset)
    begin
        if reset = '1' then
            for i in 0 to CACHE_SIZE-1 loop
                for j in 0 to ASSOCIATIVITY-1 loop
                    cache(i)(j).valid &lt;= '0';
                    cache(i)(j).tag &lt;= (others =&gt; '0');
                    cache(i)(j).data &lt;= (others =&gt; '0');
                end loop;
            end loop;
            read_data &lt;= (others =&gt; '0');
            hit &lt;= '0';

        elsif rising_edge(clk) then
            -- Extract index, tag, and offset from address
            index &lt;= conv_integer(address(31 downto 24));   -- 8-bit index
            tag &lt;= address(23 downto 0);			     -- 24-bit index
            offset &lt;= address(1 downto 0);				-- 2-bit offset

            -- Check for cache hit
            found &lt;= '0';
            for way in 0 to ASSOCIATIVITY-1 loop
                if cache(index)(way).valid = '1' and cache(index)(way).tag = tag then
                    found &lt;= '1';
                    hit_way &lt;= way;
                end if;
            end loop;

            if found = '1' then
                -- Cache hit
                hit &lt;= '1';
                read_data &lt;= cache(index)(hit_way).data;
                if write_enable = '1' then
                    cache(index)(hit_way).data &lt;= write_data;
                end if;
            else
                -- Cache miss
                hit &lt;= '0';
                read_data &lt;= (others =&gt; '0');
                -- Write operation (if enabled)
                if write_enable = '1' then
                    cache(index)(0).valid &lt;= '1';  -- Simple policy: replace way 0
                    cache(index)(0).tag &lt;= tag;
                    cache(index)(0).data &lt;= write_data;
                end if;
            end if;
        end if;
    end process;
end Behavioral;
</vhdl>
</project>
