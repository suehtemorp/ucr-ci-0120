<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
    <comp lib="0" loc="(1110,710)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1130,570)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(1160,830)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="6"/>
    </comp>
    <comp lib="0" loc="(1230,580)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(1250,770)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="9"/>
    </comp>
    <comp lib="0" loc="(1300,680)" name="Pin">
      <a name="appearance" val="classic"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="17"/>
    </comp>
    <comp lib="0" loc="(800,640)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="radix" val="16"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(850,570)" name="Clock"/>
    <comp loc="(1100,570)" name="cacheLRU">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(1100,570)" to="(1130,570)"/>
    <wire from="(1100,580)" to="(1100,590)"/>
    <wire from="(1100,580)" to="(1230,580)"/>
    <wire from="(1100,610)" to="(1220,610)"/>
    <wire from="(1100,630)" to="(1210,630)"/>
    <wire from="(1100,650)" to="(1160,650)"/>
    <wire from="(1100,670)" to="(1100,710)"/>
    <wire from="(1100,710)" to="(1110,710)"/>
    <wire from="(1160,650)" to="(1160,830)"/>
    <wire from="(1210,630)" to="(1210,770)"/>
    <wire from="(1210,770)" to="(1250,770)"/>
    <wire from="(1220,610)" to="(1220,680)"/>
    <wire from="(1220,680)" to="(1300,680)"/>
    <wire from="(800,640)" to="(870,640)"/>
    <wire from="(850,570)" to="(880,570)"/>
    <wire from="(870,590)" to="(870,640)"/>
    <wire from="(870,590)" to="(880,590)"/>
  </circuit>
  <vhdl name="cache">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity cache is
    Port (
        clk : in std_logic;
        reset : in std_logic;
        address : in std_logic_vector(31 downto 0);
        write_data : in std_logic_vector(31 downto 0);
        write_enable : in std_logic;
        read_data : out std_logic_vector(31 downto 0);
        hit : out std_logic
    );
end cache;

architecture Behavioral of cache is
    -- Cache parameters
    constant CACHE_SIZE : integer := 256;  -- Number of sets
    constant ASSOCIATIVITY : integer := 2; -- 2-way associative

    -- Type declarations
    type cache_line is record
        valid : std_logic;
        tag : std_logic_vector(23 downto 0);
        data : std_logic_vector(31 downto 0);
    end record;

    type cache_set is array (0 to ASSOCIATIVITY-1) of cache_line;
    type cache_array is array (0 to CACHE_SIZE-1) of cache_set;

    -- Cache memory
    signal cache : cache_array := (others =&gt; (others =&gt; (valid =&gt; '0', tag =&gt; (others =&gt; '0'), data =&gt; (others =&gt; '0'))));

    -- Internal signals
    signal index : integer range 0 to CACHE_SIZE-1;
    signal tag : std_logic_vector(23 downto 0);
    signal offset : std_logic_vector(1 downto 0);
    signal hit_way : integer range 0 to ASSOCIATIVITY-1;
    signal found : std_logic;
    signal way : integer range 0 to ASSOCIATIVITY-1;

begin
    process(clk, reset)
    begin
        if reset = '1' then
            for i in 0 to CACHE_SIZE-1 loop
                for j in 0 to ASSOCIATIVITY-1 loop
                    cache(i)(j).valid &lt;= '0';
                    cache(i)(j).tag &lt;= (others =&gt; '0');
                    cache(i)(j).data &lt;= (others =&gt; '0');
                end loop;
            end loop;
            read_data &lt;= (others =&gt; '0');
            hit &lt;= '0';

        elsif rising_edge(clk) then
            -- Extract index, tag, and offset from address
            index &lt;= conv_integer(address(31 downto 24));   -- 8-bit index
            tag &lt;= address(23 downto 0);			     -- 24-bit index
            offset &lt;= address(1 downto 0);				-- 2-bit offset
            
            -- Check for cache hit
            found &lt;= '0';
           if cache(index)(way).valid = '1' and cache(index)(way).tag = tag then
               found &lt;= '1';
               hit_way &lt;= way;
           end if;

            if found = '1' then
                -- Cache hit
                hit &lt;= '1';
                read_data &lt;= cache(index)(hit_way).data;
                if write_enable = '1' then
                    cache(index)(hit_way).data &lt;= write_data;
                end if;
            else
                -- Cache miss
                hit &lt;= '0';
                read_data &lt;= (others =&gt; '0');
                -- Write operation (if enabled)
                if write_enable = '1' then
                    cache(index)(0).valid &lt;= '1';  -- Simple policy: replace way 0
                    cache(index)(0).tag &lt;= tag;
                    cache(index)(0).data &lt;= write_data;
                end if;
            end if;
        end if;
    end process;
end Behavioral;
</vhdl>
  <vhdl name="classCache">--------------------------------------------------------------------------------
-- Description :
-- Cache for pipelined MIPS processor. 
-- 2 way associative.
-- 32 bit addresses and 32 bit data output. 
-- Address is divided this way: 
--  tag is of 10 bits, index is of 8 bits and offset is 5 bits. 
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

USE ieee.numeric_std.all;  

ENTITY classCache IS
  PORT (
  ------------------------------------------------------------------------------
  --Insert input ports below
    clock      : IN  std_logic;           
    Address: IN std_logic_vector(31 DOWNTO 0);

  ------------------------------------------------------------------------------
	hit : OUT std_logic; 
	data_out: OUT std_logic_vector(31 DOWNTO 0);
		tag_out : OUT std_logic_vector (10 DOWNTO 0); 
		index_out : OUT std_logic_vector (8 DOWNTO 0); 
		offset_out :OUT std_logic_vector (5 DOWNTO 0);
	miss_out: OUT std_logic
    );
END classCache;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF classCache IS

type bloque is array(0 to 63) of std_logic_vector(10 downto 0);
type t_set is array(0 to 255) of bloque;
signal cache0 : t_set;
signal cache1 : t_set; 

type t_tag is array(0 to 255) of std_logic_vector(10 downto 0);

type t_valid is array(0 to 255) of std_logic;

type t_Dirty is array(0 to 255) of std_logic;



signal s_tag : std_logic_vector(10 downto 0);
signal s_index :std_logic_vector (8 DOWNTO 0); 
signal s_offset : std_logic_vector (5 DOWNTO 0); 

signal data: std_logic_vector(31 DOWNTO 0); 
signal hit_addr : std_logic;


type t_Memory is array (0 to 31) of std_logic_vector(31 downto 0);
signal mainmem : t_Memory:= ("00000000000000000000000000000001",others =&gt;"00000000000000000000000000100000");

signal dirtys0 : t_Dirty;
signal valids0 : t_valid:= ('1', '0','0','0', others =&gt; '0');
signal tags0 : t_tag:=( others =&gt; "00000000000");

signal dirtys1 : t_Dirty;
signal valids1 : t_valid:= ('1', '0','0','0', others =&gt; '0');
signal tags1 : t_tag:=( others =&gt; "00000000000");

signal miss : std_logic; 

BEGIN

process (clock)
	begin
	if clock = '1' then
		s_tag &lt;= Address(25 DOWNTO 15); 
		s_index &lt;= Address(14  DOWNTO 6); 
		s_offset &lt;= Address(5  DOWNTO 0); 
		hit_addr &lt;= '0'; 
		if valids0(to_integer(unsigned(s_index))) = '1' or valids1(to_integer(unsigned(s_index))) = '1' then 
			if s_tag = tags0(to_integer(unsigned(s_index))) or s_tag = tags1(to_integer(unsigned(s_index))) then 
				data &lt;= mainmem(to_integer(unsigned(s_offset))); 
				hit_addr &lt;= '1'; 
				miss &lt;= '0';
			end if; 
		else 
			hit_addr &lt;= '0'; 
			if s_tag(0) = '0' then
				cache0(to_integer(unsigned(s_index)))(to_integer(unsigned(s_index))) &lt;= s_tag;
				dirtys0(to_integer(unsigned(s_index))) &lt;= '1'; 
				valids0(to_integer(unsigned(s_index))) &lt;= '1';
				tags0(to_integer(unsigned(s_index))) &lt;= s_tag;
			else
				cache1(to_integer(unsigned(s_index)))(to_integer(unsigned(s_index))) &lt;= s_tag;
				dirtys1(to_integer(unsigned(s_index))) &lt;= '1'; 
				valids1(to_integer(unsigned(s_index))) &lt;= '1';
				tags1(to_integer(unsigned(s_index))) &lt;= s_tag;
			end if; 
			miss &lt;= '1'; 
			hit_addr &lt;= '0'; 
			
		end if; 
		
	end if; 
end process;

	tag_out &lt;= s_tag; 
	index_out &lt;= s_index;
	offset_out &lt;= s_offset;
	hit &lt;= hit_addr; 
	data_out &lt;= data;
	miss_out &lt;= miss; 

END TypeArchitecture;
</vhdl>
  <vhdl name="cacheLRU">--------------------------------------------------------------------------------
-- Description :
-- Cache for pipelined MIPS processor. 
-- 2 way associative.
-- 32 bit addresses and 32 bit data output. 
-- Address is divided this way: 
--  tag is of 10 bits, index is of 8 bits and offset is 5 bits. 
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

USE ieee.numeric_std.all;  

ENTITY cacheLRU IS
  PORT (
  ------------------------------------------------------------------------------
  --Insert input ports below
    clock      : IN  std_logic;           
    Address: IN std_logic_vector(31 DOWNTO 0);

  ------------------------------------------------------------------------------
	hit : OUT std_logic; 
	data_out: OUT std_logic_vector(31 DOWNTO 0);
		tag_out : OUT std_logic_vector (16 DOWNTO 0); 
		index_out : OUT std_logic_vector (8 DOWNTO 0); 
		offset_out :OUT std_logic_vector (5 DOWNTO 0);
	miss_out: OUT std_logic
    );
END cacheLRU;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF cacheLRU IS

type bloque is array(0 to 63) of std_logic_vector(16 downto 0);
type t_set is array(0 to 255) of bloque;
signal cache0 : t_set;
signal cache1 : t_set; 

type t_tag is array(0 to 255) of std_logic_vector(16 downto 0);

type t_valid is array(0 to 255) of std_logic;

type t_Dirty is array(0 to 255) of std_logic;

type t_LRU is array(0 to 255) of std_logic; 



signal s_tag : std_logic_vector(16 downto 0);
signal s_index :std_logic_vector (8 DOWNTO 0); 
signal s_offset : std_logic_vector (5 DOWNTO 0); 

signal data: std_logic_vector(31 DOWNTO 0); 
signal hit_addr : std_logic;


type t_Memory is array (0 to 31) of std_logic_vector(31 downto 0);
signal mainmem : t_Memory:= ("00000000000000000000000000000001",others =&gt;"00000000000000000000000000100000");

signal dirtys0 : t_Dirty:= ( others =&gt; '0');
signal valids0 : t_valid:= ( others =&gt; '0');
signal tags0 : t_tag:=( others =&gt; "00000000000000000");
signal lru0: t_LRU:=(others =&gt; '0'); 

signal dirtys1 : t_Dirty:= ( others =&gt; '0');
signal valids1 : t_valid:= (others =&gt; '0');
signal tags1 : t_tag:=( others =&gt; "00000000000000000");
signal lru1: t_LRU:=(others =&gt; '1'); 


signal miss : std_logic; 

BEGIN

process (clock)
	begin
	if clock = '1' then
		s_tag &lt;= Address(31 DOWNTO 15); 
		s_index &lt;= Address(14  DOWNTO 6); 
		s_offset &lt;= Address(5  DOWNTO 0); 
		hit_addr &lt;= '0'; 
		miss &lt;= '1'; 
		if valids0(to_integer(unsigned(s_index))) = '1' or valids1(to_integer(unsigned(s_index))) = '1' then 
			if s_tag = tags0(to_integer(unsigned(s_index))) or s_tag = tags1(to_integer(unsigned(s_index))) then 
				data &lt;= mainmem(to_integer(unsigned(s_offset))); 
				hit_addr &lt;= '1'; 
				miss &lt;= '0';
			end if; 
		end if;

		if lru0(to_integer(unsigned(s_index))) = '0' then
				-- En este caso se escoje el set 0 
				-- Llenar el arreglo de valid con '1' en la posicion del index 
				valids0(to_integer(unsigned(s_index))) &lt;= '1';
				
				-- Poner el actual lru_0 bit en '1' y cambiar el otro a '0' en el index correspondiente 
				lru0(to_integer(unsigned(s_index))) &lt;= '1'; 
				lru1(to_integer(unsigned(s_index))) &lt;= '0';
				
				-- Guardar el tag en cache_0 
				cache0(to_integer(unsigned(s_index)))(to_integer(unsigned(s_offset))) &lt;= s_tag;

				-- Llenar el arreglo de tags con el tag correspondiente
				tags0(to_integer(unsigned(s_index))) &lt;= s_tag;
		else
				-- En este caso se escoje el set 1 
				-- Llenar el arreglo de valid con '1' en la posicion del index 
				valids1(to_integer(unsigned(s_index))) &lt;= '1';
				
				--- Poner el actual lru_0 bit en '1' y cambiar el otro a '0' en el index correspondiente 
				lru1(to_integer(unsigned(s_index))) &lt;= '1'; 
				lru0(to_integer(unsigned(s_index))) &lt;= '0'; 
				-- Guardar el tag en cache_0 
				cache1(to_integer(unsigned(s_index)))(to_integer(unsigned(s_offset))) &lt;= s_tag;

				-- Llenar el arreglo de tags con el tag correspondiente
				tags1(to_integer(unsigned(s_index))) &lt;= s_tag;

		end if; 
		
		
	end if; 
end process;

	tag_out &lt;= s_tag; 
	index_out &lt;= s_index;
	offset_out &lt;= s_offset;
	hit &lt;= hit_addr; 
	data_out &lt;= data;
	miss_out &lt;= miss; 

END TypeArchitecture;
</vhdl>
</project>
