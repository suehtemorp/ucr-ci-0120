<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.8.0" version="1.0">
  This file is intended to be loaded by Logisim-evolution v3.8.0(https://github.com/logisim-evolution/).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="classic"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1"/>
  <lib desc="#Plexers" name="2"/>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4"/>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7"/>
  <lib desc="#Base" name="8"/>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11"/>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Poke Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool"/>
    <sep/>
    <tool lib="0" name="Pin"/>
    <tool lib="0" name="Pin">
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop"/>
    <tool lib="4" name="Register"/>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="simulationFrequency" val="1.0"/>
    <comp lib="0" loc="(1530,660)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="address_mips"/>
      <a name="radix" val="16"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(1540,640)" name="Clock">
      <a name="label" val="relojs_mips1"/>
    </comp>
    <comp lib="0" loc="(1570,720)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="entradadato"/>
      <a name="radix" val="16"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(1600,700)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="write_mips"/>
    </comp>
    <comp lib="0" loc="(1890,660)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="data_mips"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(1910,610)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="hit_mips"/>
      <a name="output" val="true"/>
    </comp>
    <comp lib="0" loc="(2020,590)" name="Clock"/>
    <comp lib="0" loc="(2030,670)" name="Pin">
      <a name="appearance" val="NewPins"/>
    </comp>
    <comp loc="(1850,640)" name="cacheMips">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <comp loc="(2250,650)" name="RAM_Module">
      <a name="appearance" val="logisim_evolution"/>
    </comp>
    <wire from="(1400,680)" to="(1400,800)"/>
    <wire from="(1400,680)" to="(1630,680)"/>
    <wire from="(1400,800)" to="(2320,800)"/>
    <wire from="(1530,660)" to="(1630,660)"/>
    <wire from="(1540,640)" to="(1630,640)"/>
    <wire from="(1570,720)" to="(1630,720)"/>
    <wire from="(1600,700)" to="(1630,700)"/>
    <wire from="(1850,640)" to="(1870,640)"/>
    <wire from="(1850,660)" to="(1890,660)"/>
    <wire from="(1850,680)" to="(1940,680)"/>
    <wire from="(1850,700)" to="(1850,720)"/>
    <wire from="(1850,720)" to="(2010,720)"/>
    <wire from="(1870,610)" to="(1870,640)"/>
    <wire from="(1870,610)" to="(1910,610)"/>
    <wire from="(1940,680)" to="(1940,690)"/>
    <wire from="(1940,690)" to="(2030,690)"/>
    <wire from="(2010,710)" to="(2010,720)"/>
    <wire from="(2010,710)" to="(2030,710)"/>
    <wire from="(2020,590)" to="(2020,650)"/>
    <wire from="(2020,650)" to="(2030,650)"/>
    <wire from="(2240,650)" to="(2250,650)"/>
    <wire from="(2250,650)" to="(2320,650)"/>
    <wire from="(2320,650)" to="(2320,800)"/>
  </circuit>
  <vhdl name="cache">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity cache is
    Port (
        clk : in std_logic;
        reset : in std_logic;
        address : in std_logic_vector(31 downto 0);
        write_data : in std_logic_vector(31 downto 0);
        write_enable : in std_logic;
        read_data : out std_logic_vector(31 downto 0);
        hit : out std_logic
    );
end cache;

architecture Behavioral of cache is
    -- Cache parameters
    constant CACHE_SIZE : integer := 256;  -- Number of sets
    constant ASSOCIATIVITY : integer := 2; -- 2-way associative

    -- Type declarations
    type cache_line is record
        valid : std_logic;
        tag : std_logic_vector(23 downto 0);
        data : std_logic_vector(31 downto 0);
    end record;

    type cache_set is array (0 to ASSOCIATIVITY-1) of cache_line;
    type cache_array is array (0 to CACHE_SIZE-1) of cache_set;

    -- Cache memory
    signal cache : cache_array := (others =&gt; (others =&gt; (valid =&gt; '0', tag =&gt; (others =&gt; '0'), data =&gt; (others =&gt; '0'))));

    -- Internal signals
    signal index : integer range 0 to CACHE_SIZE-1;
    signal tag : std_logic_vector(23 downto 0);
    signal offset : std_logic_vector(1 downto 0);
    signal hit_way : integer range 0 to ASSOCIATIVITY-1;
    signal found : std_logic;
    signal way : integer range 0 to ASSOCIATIVITY-1;

begin
    process(clk, reset)
    begin
        if reset = '1' then
            for i in 0 to CACHE_SIZE-1 loop
                for j in 0 to ASSOCIATIVITY-1 loop
                    cache(i)(j).valid &lt;= '0';
                    cache(i)(j).tag &lt;= (others =&gt; '0');
                    cache(i)(j).data &lt;= (others =&gt; '0');
                end loop;
            end loop;
            read_data &lt;= (others =&gt; '0');
            hit &lt;= '0';

        elsif rising_edge(clk) then
            -- Extract index, tag, and offset from address
            index &lt;= conv_integer(address(31 downto 24));   -- 8-bit index
            tag &lt;= address(23 downto 0);			     -- 24-bit index
            offset &lt;= address(1 downto 0);				-- 2-bit offset
            
            -- Check for cache hit
            found &lt;= '0';
           if cache(index)(way).valid = '1' and cache(index)(way).tag = tag then
               found &lt;= '1';
               hit_way &lt;= way;
           end if;

            if found = '1' then
                -- Cache hit
                hit &lt;= '1';
                read_data &lt;= cache(index)(hit_way).data;
                if write_enable = '1' then
                    cache(index)(hit_way).data &lt;= write_data;
                end if;
            else
                -- Cache miss
                hit &lt;= '0';
                read_data &lt;= (others =&gt; '0');
                -- Write operation (if enabled)
                if write_enable = '1' then
                    cache(index)(0).valid &lt;= '1';  -- Simple policy: replace way 0
                    cache(index)(0).tag &lt;= tag;
                    cache(index)(0).data &lt;= write_data;
                end if;
            end if;
        end if;
    end process;
end Behavioral;
</vhdl>
  <vhdl name="classCache">--------------------------------------------------------------------------------
-- Description :
-- Cache for pipelined MIPS processor. 
-- 2 way associative.
-- 32 bit addresses and 32 bit data output. 
-- Address is divided this way: 
--  tag is of 10 bits, index is of 8 bits and offset is 5 bits. 
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

USE ieee.numeric_std.all;  

ENTITY classCache IS
  PORT (
  ------------------------------------------------------------------------------
  --Insert input ports below
    clock      : IN  std_logic;           
    Address: IN std_logic_vector(31 DOWNTO 0);

  ------------------------------------------------------------------------------
	hit : OUT std_logic; 
	data_out: OUT std_logic_vector(31 DOWNTO 0);
		tag_out : OUT std_logic_vector (10 DOWNTO 0); 
		index_out : OUT std_logic_vector (8 DOWNTO 0); 
		offset_out :OUT std_logic_vector (5 DOWNTO 0);
	miss_out: OUT std_logic
    );
END classCache;

--------------------------------------------------------------------------------
--Complete your VHDL description below
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF classCache IS

type bloque is array(0 to 63) of std_logic_vector(10 downto 0);
type t_set is array(0 to 255) of bloque;
signal cache0 : t_set;
signal cache1 : t_set; 

type t_tag is array(0 to 255) of std_logic_vector(10 downto 0);

type t_valid is array(0 to 255) of std_logic;

type t_Dirty is array(0 to 255) of std_logic;



signal s_tag : std_logic_vector(10 downto 0);
signal s_index :std_logic_vector (8 DOWNTO 0); 
signal s_offset : std_logic_vector (5 DOWNTO 0); 

signal data: std_logic_vector(31 DOWNTO 0); 
signal hit_addr : std_logic;


type t_Memory is array (0 to 31) of std_logic_vector(31 downto 0);
signal mainmem : t_Memory:= ("00000000000000000000000000000001",others =&gt;"00000000000000000000000000100000");

signal dirtys0 : t_Dirty;
signal valids0 : t_valid:= ('1', '0','0','0', others =&gt; '0');
signal tags0 : t_tag:=( others =&gt; "00000000000");

signal dirtys1 : t_Dirty;
signal valids1 : t_valid:= ('1', '0','0','0', others =&gt; '0');
signal tags1 : t_tag:=( others =&gt; "00000000000");

signal miss : std_logic; 

BEGIN

process (clock)
	begin
	if clock = '1' then
		s_tag &lt;= Address(25 DOWNTO 15); 
		s_index &lt;= Address(14  DOWNTO 6); 
		s_offset &lt;= Address(5  DOWNTO 0); 
		hit_addr &lt;= '0'; 
		if valids0(to_integer(unsigned(s_index))) = '1' or valids1(to_integer(unsigned(s_index))) = '1' then 
			if s_tag = tags0(to_integer(unsigned(s_index))) or s_tag = tags1(to_integer(unsigned(s_index))) then 
				data &lt;= mainmem(to_integer(unsigned(s_offset))); 
				hit_addr &lt;= '1'; 
				miss &lt;= '0';
			end if; 
		else 
			hit_addr &lt;= '0'; 
			if s_tag(0) = '0' then
				cache0(to_integer(unsigned(s_index)))(to_integer(unsigned(s_index))) &lt;= s_tag;
				dirtys0(to_integer(unsigned(s_index))) &lt;= '1'; 
				valids0(to_integer(unsigned(s_index))) &lt;= '1';
				tags0(to_integer(unsigned(s_index))) &lt;= s_tag;
			else
				cache1(to_integer(unsigned(s_index)))(to_integer(unsigned(s_index))) &lt;= s_tag;
				dirtys1(to_integer(unsigned(s_index))) &lt;= '1'; 
				valids1(to_integer(unsigned(s_index))) &lt;= '1';
				tags1(to_integer(unsigned(s_index))) &lt;= s_tag;
			end if; 
			miss &lt;= '1'; 
			hit_addr &lt;= '0'; 
			
		end if; 
		
	end if; 
end process;

	tag_out &lt;= s_tag; 
	index_out &lt;= s_index;
	offset_out &lt;= s_offset;
	hit &lt;= hit_addr; 
	data_out &lt;= data;
	miss_out &lt;= miss; 

END TypeArchitecture;
</vhdl>
  <vhdl name="cacheLRU">--------------------------------------------------------------------------------
-- Description :
-- Cache for pipelined MIPS processor. 
-- 2 way associative.
-- 32 bit addresses and 32 bit data output. 
-- Address is divided this way: 
--  tag is of 17 bits, index is of 8 bits and offset is 5 bits. 
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

USE ieee.numeric_std.all;  

ENTITY cacheLRU IS
  PORT (
  ------------------------------------------------------------------------------
  -- Input ports
    clock      : IN  std_logic;           
    Address: IN std_logic_vector(31 DOWNTO 0);

  ------------------------------------------------------------------------------
  -- Output ports
	hit : OUT std_logic; 
	data_out: OUT std_logic_vector(31 DOWNTO 0);
		tag_out : OUT std_logic_vector (20 DOWNTO 0); 
		index_out : OUT std_logic_vector (4 DOWNTO 0); 
		offset_out :OUT std_logic_vector (5 DOWNTO 0);
	miss_out: OUT std_logic;
	set_0: OUT std_logic; 
	set_1: OUT std_logic
    );
END cacheLRU;

--------------------------------------------------------------------------------
-- Architecture of the cacheLRU entity
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF cacheLRU IS

-- Cache block definition: array of 64 blocks of 20-bit words
type bloque is array(0 to 63) of std_logic_vector(20 downto 0);

-- Cache set definition: array of 256 cache blocks
type t_set is array(0 to 255) of bloque;

-- Two sets for the 2-way associative cache
signal cache0 : t_set;
signal cache1 : t_set; 

-- Tag, valid, dirty, and LRU signal definitions
type t_tag is array(0 to 255) of std_logic_vector(20 downto 0);
type t_valid is array(0 to 255) of std_logic;
type t_Dirty is array(0 to 255) of std_logic;
type t_LRU is array(0 to 255) of std_logic; 

-- Internal signals for tag, index, offset, and data
signal s_tag : std_logic_vector(20 downto 0);
signal s_index :std_logic_vector (4 DOWNTO 0); 
signal s_offset : std_logic_vector (5 DOWNTO 0); 
signal data: std_logic_vector(31 DOWNTO 0); 
signal hit_addr : std_logic;

-- Main memory definition: array of 32 words of 32 bits
type t_Memory is array (0 to 31) of std_logic_vector(31 downto 0);
signal mainmem : t_Memory:= ("00000000000000000000000000000001",others =&gt;"00000000000000000000000000100000");

-- Signals for dirty, valid, tag, and LRU bits for both cache sets
signal dirtys0 : t_Dirty:= ( others =&gt; '0');
signal valids0 : t_valid:= ( others =&gt; '0');
signal tags0 : t_tag:=( others =&gt; "000000000000000000000");
signal lru0: t_LRU:=(others =&gt; '0'); 

signal dirtys1 : t_Dirty:= ( others =&gt; '0');
signal valids1 : t_valid:= (others =&gt; '0');
signal tags1 : t_tag:=( others =&gt; "000000000000000000000");
signal lru1: t_LRU:=(others =&gt; '1'); 

-- Signal for miss logic
signal miss : std_logic; 

signal set_0_out: std_logic;
signal set_1_out : std_logic; 



BEGIN
-- Process that handles the cache behavior on clock edge
process (clock)
	begin
	if clock = '1' then
	-- Extracting tag, index, and offset from the address when clock is in its positive state 
		s_tag &lt;= Address(31 DOWNTO 11); 
		s_index &lt;= Address(10  DOWNTO 6); 
		s_offset &lt;= Address(5  DOWNTO 0); 
		-- Default values for hit and miss signals 
		hit_addr &lt;= '0'; 
		miss &lt;= '1'; 

		-- Check if the address is in the cache (this is when valid bit and tag match) 
		if valids0(to_integer(unsigned(s_index))) = '1' or valids1(to_integer(unsigned(s_index))) = '1' then 
			if s_tag = tags0(to_integer(unsigned(s_index))) or s_tag = tags1(to_integer(unsigned(s_index))) then 
				-- If found, read data from main memory
				data &lt;= mainmem(to_integer(unsigned(s_offset))); 
				hit_addr &lt;= '1'; 
				miss &lt;= '0';
			end if; 
		end if; 
		-- Determine which set to used based on LRU bit. Check if the tag is not stored already in the cache 
		if lru0(to_integer(unsigned(s_index))) = '0'and tags1(to_integer(unsigned(s_index))) /= s_tag  then 

				-- Use set 0 
				valids0(to_integer(unsigned(s_index))) &lt;= '1';
				
				-- Actual lru_0 bit changes to '1' and the other lru_1 bit changes to '0' in the index from address.  
				lru0(to_integer(unsigned(s_index))) &lt;= '1'; 
				lru1(to_integer(unsigned(s_index))) &lt;= '0';
				
				-- Save tag in cache0
				cache0(to_integer(unsigned(s_index)))(to_integer(unsigned(s_offset))) &lt;= s_tag;

				-- Add the tag to tags0 
				tags0(to_integer(unsigned(s_index))) &lt;= s_tag;

		
				set_1_out &lt;= '0'; 
				set_0_out &lt;= '1';
		elsif lru1(to_integer(unsigned(s_index))) = '0' and tags0(to_integer(unsigned(s_index))) /= s_tag then 
				-- Use set 1 
				valids1(to_integer(unsigned(s_index))) &lt;= '1';
				
				-- Actual lru_1 bit changes to '1' and the other lru_0 bit changes to '0' in the index from address.  
				lru1(to_integer(unsigned(s_index))) &lt;= '1'; 
				lru0(to_integer(unsigned(s_index))) &lt;= '0'; 
				-- Save tag in cache1
				cache1(to_integer(unsigned(s_index)))(to_integer(unsigned(s_offset))) &lt;= s_tag;

				-- Add the tag to tags1
				tags1(to_integer(unsigned(s_index))) &lt;= s_tag;


				set_1_out &lt;= '1'; 
				set_0_out &lt;= '0'; 
		end if;
	end if; 
end process;

	-- Assign internal signals to output ports 
	tag_out &lt;= s_tag; 
	index_out &lt;= s_index;
	offset_out &lt;= s_offset;
	hit &lt;= hit_addr; 
	data_out &lt;= data;
	miss_out &lt;= miss; 
	set_0 &lt;= set_0_out; 
	set_1 &lt;= set_1_out;

END TypeArchitecture;
</vhdl>
  <vhdl name="cacheMips">--------------------------------------------------------------------------------
-- Description :
-- Cache for pipelined MIPS processor. 
-- 2 way associative.
-- 32 bit addresses and 32 bit data output. 
-- Address is divided this way: 
--  tag is of 17 bits, index is of 8 bits and offset is 5 bits. 
--------------------------------------------------------------------------------

LIBRARY ieee;
USE ieee.std_logic_1164.all;

USE ieee.numeric_std.all;  

ENTITY cacheMips IS
  PORT (
  ------------------------------------------------------------------------------
  -- Input ports
    clock      : IN  std_logic;           
    Address: IN std_logic_vector(31 DOWNTO 0);
    Data_From_Mem: IN std_logic_vector(31 DOWNTO 0); 
    write_cache: IN std_logic; 
    entrada_dato: IN std_logic_vector(31 DOWNTO 0); 

  ------------------------------------------------------------------------------
  -- Output ports
	hit : OUT std_logic; 
	data: OUT std_logic_vector(31 DOWNTO 0);
	miss: OUT std_logic; 
	offset: OUT std_logic_vector(5 DOWNTO 0)
    );
END cacheMips;

--------------------------------------------------------------------------------
-- Architecture of the cacheLRU entity
--------------------------------------------------------------------------------

ARCHITECTURE TypeArchitecture OF cacheMips IS

-- Cache block definition: array of 64 blocks of 20-bit words
type bloque is array(0 to 63) of std_logic_vector(20 downto 0);

-- Cache set definition: array of 256 cache blocks
type t_set is array(0 to 255) of bloque;

-- Two sets for the 2-way associative cache
signal cache0 : t_set;
signal cache1 : t_set; 

-- Tag, valid, dirty, and LRU signal definitions
type t_tag is array(0 to 255) of std_logic_vector(20 downto 0);
type t_valid is array(0 to 255) of std_logic;
type t_Dirty is array(0 to 255) of std_logic;
type t_LRU is array(0 to 255) of std_logic; 

-- Internal signals for tag, index, offset, and data
signal s_tag : std_logic_vector(20 downto 0);
signal s_index :std_logic_vector (4 DOWNTO 0); 
signal s_offset : std_logic_vector (5 DOWNTO 0); 
signal data_out: std_logic_vector(31 DOWNTO 0); 
signal hit_addr : std_logic;

-- Main memory definition: array of 32 words of 32 bits
type t_Memory is array (0 to 31) of std_logic_vector(31 downto 0);
signal mainmem : t_Memory:= ("00000000000000000000000000000001",others =&gt;"00000000000000000000000000100000");

-- Signals for dirty, valid, tag, and LRU bits for both cache sets
signal dirtys0 : t_Dirty:= ( others =&gt; '0');
signal valids0 : t_valid:= ( others =&gt; '0');
signal tags0 : t_tag:=( others =&gt; "000000000000000000000");
signal lru0: t_LRU:=(others =&gt; '0'); 

signal dirtys1 : t_Dirty:= ( others =&gt; '0');
signal valids1 : t_valid:= (others =&gt; '0');
signal tags1 : t_tag:=( others =&gt; "000000000000000000000");
signal lru1: t_LRU:=(others =&gt; '1'); 

-- Signal for miss logic
signal miss_out : std_logic; 

signal set_0_out: std_logic;
signal set_1_out : std_logic; 



BEGIN
-- Process that handles the cache behavior on clock edge
process (clock)
	begin
	if clock = '1' then
	-- Extracting tag, index, and offset from the address when clock is in its positive state 
		s_tag &lt;= Address(31 DOWNTO 11); 
		s_index &lt;= Address(10  DOWNTO 6); 
		s_offset &lt;= Address(5  DOWNTO 0); 
		-- Default values for hit and miss signals 
		hit_addr &lt;= '0'; 
		miss_out &lt;= '1'; 

		-- Check if the address is in the cache (this is when valid bit and tag match) 
		if valids0(to_integer(unsigned(s_index))) = '1' or valids1(to_integer(unsigned(s_index))) = '1' then 
			if s_tag = tags0(to_integer(unsigned(s_index))) or s_tag = tags1(to_integer(unsigned(s_index))) then 
				-- If found, read data from main memory
				data_out &lt;= Data_From_Mem;
				hit_addr &lt;= '1'; 
				miss_out &lt;= '0';
			end if; 
		end if; 
		-- Determine which set to used based on LRU bit. Check if the tag is not stored already in the cache 
		if lru0(to_integer(unsigned(s_index))) = '0'and tags1(to_integer(unsigned(s_index))) /= s_tag  then 

				-- Use set 0 
				valids0(to_integer(unsigned(s_index))) &lt;= '1';
				
				-- Actual lru_0 bit changes to '1' and the other lru_1 bit changes to '0' in the index from address.  
				lru0(to_integer(unsigned(s_index))) &lt;= '1'; 
				lru1(to_integer(unsigned(s_index))) &lt;= '0';
				
				-- Save tag in cache0
				cache0(to_integer(unsigned(s_index)))(to_integer(unsigned(s_offset))) &lt;= s_tag;

				-- Add the tag to tags0 
				tags0(to_integer(unsigned(s_index))) &lt;= s_tag;

		elsif lru1(to_integer(unsigned(s_index))) = '0' and tags0(to_integer(unsigned(s_index))) /= s_tag then 
				-- Use set 1 
				valids1(to_integer(unsigned(s_index))) &lt;= '1';
				
				-- Actual lru_1 bit changes to '1' and the other lru_0 bit changes to '0' in the index from address.  
				lru1(to_integer(unsigned(s_index))) &lt;= '1'; 
				lru0(to_integer(unsigned(s_index))) &lt;= '0'; 
				-- Save tag in cache1
				cache1(to_integer(unsigned(s_index)))(to_integer(unsigned(s_offset))) &lt;= s_tag;

				-- Add the tag to tags1
				tags1(to_integer(unsigned(s_index))) &lt;= s_tag;

		end if;
	end if; 
end process;

	-- Assign internal signals to output ports 

	hit &lt;= hit_addr; 
	data &lt;= data_out;
	miss &lt;= miss_out; 
	offset &lt;= s_offset;

END TypeArchitecture;
</vhdl>
  <vhdl name="ROM_MIPS">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
LIBRARY ieee;
USE ieee.std_logic_1164.all;

USE ieee.numeric_std.all;  
&#13;
ENTITY ROM_MIPS IS&#13;
  PORT (&#13;
  ------------------------------------------------------------------------------&#13;

    clock      : IN  std_logic;                    
    MIPS_Indice_Instruccion        : IN  std_logic_vector(31 DOWNTO 0); 
    Usar_Little_Endian: IN std_logic; 
    
  ------------------------------------------------------------------------------&#13;

    byte        : OUT std_logic_vector(31 DOWNTO 0);               
    nibble        : OUT std_logic_vector(30 DOWNTO 0);
    word: OUT  std_logic_vector(29 DOWNTO 0);
    ROM_WORD: OUT std_logic_vector(31 DOWNTO 0) 
    );&#13;
END ROM_MIPS;&#13;
--------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF ROM_MIPS IS&#13;

type t_Memory is array (0 to 64) of std_logic_vector(31 downto 0);

signal byte_out        :  std_logic_vector(31 DOWNTO 0);               
signal nibble_out        :  std_logic_vector(30 DOWNTO 0);
signal word_out:   std_logic_vector(29 DOWNTO 0);

signal ROM: t_Memory:=(x"a2d3a1e0",x"1ad3f349",others =&gt;x"00000000") ; 
signal rom_word_out : std_logic_vector(31 DOWNTO 0);


BEGIN
-- Process that handles the cache behavior on clock edge
process (clock)
	begin
	if clock = '1' then
		byte_out &lt;= MIPS_Indice_Instruccion; 
		nibble_out &lt;= MIPS_Indice_Instruccion(31 DOWNTO 1); 
		word_out &lt;= MIPS_Indice_Instruccion(31 DOWNTO 2);  

		rom_word_out &lt;= ROM(to_integer(unsigned(word_out))); 
&#13;	end if; 
end process;

byte &lt;= byte_out; 
nibble &lt;= nibble_out; 
word &lt;= word_out; 
ROM_WORD &lt;= rom_word_out;

END TypeArchitecture;&#13;
</vhdl>
  <vhdl name="RAM_Module">--------------------------------------------------------------------------------&#13;
-- Project :&#13;
-- File    :&#13;
-- Autor   :&#13;
-- Date    :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
-- Description :&#13;
--&#13;
--------------------------------------------------------------------------------&#13;
&#13;
LIBRARY ieee;
USE ieee.std_logic_1164.all;

USE ieee.numeric_std.all;
&#13;
ENTITY RAM_Module IS&#13;
  PORT (&#13;
  ------------------------------------------------------------------------------&#13;
  --Insert input ports below&#13;
	clock: IN std_logic;
    write : IN std_logic; 
    read: IN std_logic; 
    offset: IN std_logic_vector(5 DOWNTO 0); 
  ------------------------------------------------------------------------------&#13;
  --Insert output ports below&#13;
    data        : OUT std_logic_vector(31 DOWNTO 0)                    -- output bit example&#13;
    );&#13;
END RAM_Module;&#13;
&#13;
--------------------------------------------------------------------------------&#13;
--Complete your VHDL description below&#13;
--------------------------------------------------------------------------------&#13;
&#13;
ARCHITECTURE TypeArchitecture OF RAM_Module IS&#13;
&#13;
-- Main memory definition: array of 32 words of 32 bits
type t_Memory is array (0 to 63) of std_logic_vector(31 downto 0);
signal mainmem : t_Memory:= (x"12345678",x"1241a393",others=&gt;x"aaaabbbb");


BEGIN&#13;
process (clock)
begin
	if clock = '1' then
		&#13;if read = '1' then
			data &lt;= mainmem(to_integer(unsigned(offset))); 
		end if;
	end if;  
&#13;end process; 
END TypeArchitecture;&#13;
</vhdl>
</project>
