.data
# Image data (30x30 grayscale image)
image: .byte 0x65, 0x6a, 0x6f, 0x73, 0x6b, 0x5f, 0x84, 0x8d, 0xa4, 0xc8, 0xd6, 0xdd, 0xe7, 0xea, 0xe8, 0xe9,
          0xe2, 0xd3, 0xa0, 0xac, 0xc7, 0xbc, 0xbd, 0xbf, 0xc0, 0xc0, 0xbc, 0xb7, 0xaf, 0xa5, 0x68, 0x6d,
          0x70, 0x74, 0x66, 0x5e, 0x80, 0xa5, 0xca, 0xd6, 0xd7, 0xdb, 0xe8, 0xe8, 0xe8, 0xe8, 0xe0, 0xd4,
          0xc3, 0x8c, 0xac, 0xbe, 0xba, 0xbd, 0xbd, 0xbc, 0xba, 0xb6, 0xb0, 0xa8, 0x67, 0x6c, 0x6f, 0x70,
          0x60, 0x5d, 0x9f, 0xce, 0xd1, 0xd6, 0xd6, 0xde, 0xe1, 0xe2, 0xe5, 0xe6, 0xde, 0xd0, 0xc6, 0xa7,
          0x87, 0xb3, 0xb4, 0xb6, 0xbb, 0xb9, 0xb8, 0xb6, 0xb1, 0xa9, 0x91, 0x87, 0x7e, 0x7a, 0x63, 0x7c,
          0xc8, 0xc6, 0xcb, 0xd1, 0xd1, 0xd2, 0xd5, 0xd1, 0xd4, 0xd7, 0xd0, 0xce, 0xbe, 0xb0, 0x88, 0x98,
          0xaa, 0xae, 0xb4, 0xb7, 0xb6, 0xb5, 0xb0, 0xa8, 0xb8, 0xba, 0xba, 0xb6, 0xaf, 0xb8, 0xbd, 0xb2,
          0xb8, 0xc2, 0xc1, 0xbe, 0xc5, 0xbd, 0xbb, 0xbf, 0xbf, 0xc0, 0xb9, 0xad, 0x99, 0x83, 0x9f, 0xa4,
          0xaa, 0xb1, 0xb3, 0xb2, 0xb1, 0xab, 0xb2, 0xb6, 0xb8, 0xb8, 0xb7, 0xb3, 0xa4, 0x9f, 0xa1, 0xa8,
          0xae, 0xac, 0xad, 0xb1, 0xb2, 0xab, 0xac, 0xae, 0xb1, 0xa6, 0x9f, 0x7f, 0x93, 0xa1, 0x9e, 0xa9,
          0xaf, 0xaf, 0xb0, 0xad, 0xaf, 0xb0, 0xb1, 0xb1, 0xad, 0xa5, 0x90, 0x90, 0x8e, 0x99, 0x9f, 0x9b,
          0x9c, 0xa2, 0xa2, 0xa0, 0x9b, 0x98, 0xa0, 0x99, 0x98, 0x80, 0x89, 0x94, 0x92, 0xa3, 0xb0, 0xaf,
          0xaf, 0xad, 0xaf, 0xad, 0xaf, 0xac, 0xa2, 0x92, 0x84, 0x8a, 0x8a, 0x8e, 0x8c, 0x8d, 0x88, 0x8b,
          0x88, 0x89, 0x7f, 0x87, 0x86, 0x84, 0x87, 0x7c, 0x80, 0x8b, 0x8d, 0x9a, 0xbf, 0xb4, 0xac, 0xa9,
          0xb0, 0xaf, 0xaf, 0xa5, 0x96, 0x85, 0x78, 0x7f, 0x7f, 0x7e, 0x7b, 0x7e, 0x84, 0x8f, 0x99, 0xa2,
          0xa2, 0x9c, 0x99, 0x96, 0x8f, 0x7c, 0x8b, 0x88, 0x89, 0x8f, 0xc3, 0xda, 0xc6, 0xb1, 0xae, 0xac,
          0xab, 0x9b, 0x8c, 0x7e, 0x77, 0x7d, 0x7e, 0x8e, 0xa1, 0xa6, 0xa5, 0x93, 0x9a, 0xa7, 0xae, 0x9b,
          0x9a, 0x9a, 0x8a, 0x82, 0xa0, 0x8e, 0x89, 0x8b, 0xae, 0xe7, 0xe3, 0xdb, 0xaf, 0xaf, 0xbf, 0xba,
          0xb8, 0xb4, 0xa5, 0x91, 0x94, 0x88, 0x9d, 0xba, 0xc2, 0xb9, 0xb2, 0xbe, 0xbf, 0x9e, 0x90, 0xb7,
          0xbc, 0xba, 0xbc, 0xbb, 0xb9, 0x9e, 0xaf, 0x8f, 0x6f, 0x89, 0xa5, 0xbe, 0xc2, 0xb0, 0xb0, 0xb0,
          0xaa, 0x94, 0x99, 0x8d, 0x97, 0xb7, 0xbe, 0xb4, 0xba, 0xbd, 0xb1, 0x9f, 0x96, 0xa6, 0xb2, 0xbb,
          0xbc, 0xb8, 0xa9, 0x93, 0xb1, 0x8d, 0x72, 0x91, 0xa5, 0xb2, 0xbc, 0xb1, 0xb0, 0xad, 0xaa, 0x9b,
          0x97, 0x97, 0x91, 0xb0, 0xb6, 0xb2, 0xb3, 0xb0, 0xb1, 0xb2, 0xb2, 0xb2, 0xae, 0xaa, 0xac, 0xaa,
          0x94, 0x98, 0xb7, 0x85, 0x79, 0x9b, 0xa6, 0xae, 0xc0, 0xb0, 0xb0, 0xac, 0xaa, 0xa9, 0x91, 0x99,
          0x92, 0xa5, 0xa9, 0x94, 0x97, 0xaa, 0xbc, 0xc0, 0xbf, 0xba, 0xb2, 0xa7, 0x9f, 0x9a, 0x8a, 0x98,
          0xb2, 0x84, 0x7d, 0x9b, 0xa4, 0xaa, 0xb5, 0xb0, 0xb2, 0xb0, 0xad, 0xb3, 0xa0, 0x94, 0x91, 0x9c,
          0xa0, 0x6d, 0x7a, 0xa1, 0xb4, 0xbc, 0xbc, 0xb3, 0xab, 0xa1, 0x9b, 0x96, 0x82, 0x98, 0xad, 0x86,
          0x86, 0x9c, 0x92, 0xa4, 0xb1, 0xc9, 0xcd, 0xcf, 0xcf, 0xd3, 0xc8, 0x98, 0x8d, 0x9a, 0xa1, 0x76,
          0x77, 0x89, 0x9a, 0xa5, 0xa3, 0xa2, 0x9f, 0x98, 0x98, 0x96, 0x7e, 0x9d, 0xa1, 0x86, 0x94, 0xb9,
          0xa4, 0x95, 0xac, 0xcb, 0xce, 0xd0, 0xcf, 0xd4, 0xc8, 0x9b, 0x8f, 0x93, 0x97, 0x98, 0x81, 0x82,
          0x91, 0x9b, 0x91, 0x97, 0x9d, 0x98, 0xa0, 0x96, 0x83, 0xa5, 0x94, 0x7f, 0x9c, 0xbc, 0xc9, 0xac,
          0x95, 0xca, 0xcd, 0xcf, 0xce, 0xc2, 0xae, 0x99, 0x9e, 0x88, 0x7e, 0x97, 0x8f, 0x8a, 0x97, 0x99,
          0x8e, 0x9a, 0xa3, 0x9d, 0xa3, 0x9a, 0x94, 0xa4, 0x7b, 0x8c, 0xac, 0xb2, 0xc5, 0xc2, 0x9d, 0xc7,
          0xcc, 0xcf, 0xca, 0xaf, 0x94, 0x88, 0x94, 0x80, 0x71, 0x77, 0x89, 0x94, 0x9f, 0x9b, 0x9b, 0xa4,
          0xa5, 0x9e, 0xa2, 0xa2, 0xa4, 0x9e, 0x8c, 0xa8, 0xb0, 0xa9, 0xb4, 0xbc, 0xa4, 0xc4, 0xca, 0xce,
          0xc1, 0xa6, 0x8d, 0x8d, 0x81, 0x70, 0x7c, 0x75, 0x87, 0x9e, 0xa2, 0xa3, 0xaa, 0xa5, 0xa5, 0xa2,
          0x9f, 0xa4, 0xa9, 0xa7, 0xab, 0xa6, 0xab, 0xab, 0xa3, 0xaf, 0x9c

.data
kernel: 
    .word -1, -1, -1, -1
    .word -1,  5,  5, -1
    .word -1,  5,  5, -1
    .word -1, -1, -1, -1

image_width: .word 30
image_height: .word 30
channel_depth: .word 255

.text
.globl main

main:
    # Load image data address
    la $a0, image

    # Load kernel data address
    la $a1, kernel

    # Load image width
    lw $a2, image_width

    # Load image height
    lw $a3, image_height

    # Load channel depth
    lw $s7, channel_depth

    # Call convolution function
    jal convolve

    # Exit program
    li $v0, 10
    syscall

convolve:
    # Allocate stack frame
    addi $sp, $sp, -4
    sw $ra, 0($sp)

    # Iterate over image rows
    li $t0, 0 # row index
convolve_row_loop:
    # Iterate over image columns
    li $t1, 0 # column index
convolve_col_loop:
    # Calculate pixel offset (BYTE offset)
    mul $t2, $t0, $a2 # row offset
    add $t2, $t2, $t1 # pixel offset

    # Calculate kernel center offset
    li $t3, 1 # kernel center row
    mul $t3, $t3, 4 # kernel center row offset
    add $t3, $t3, 2 # kernel center pixel offset

    # Pass BYTE offset to convolve_sum
    move $a0, $t2

    # Call convolution sum function 
    move $a1, $t3 # pass kernel center offset
    jal convolve_sum

    # Store result in image (adjust for byte addressing)
    sb $v0, image($t2)

    # Increment column index
    addi $t1, $t1, 1
    blt $t1, $a2, convolve_col_loop

    # Increment row index
    addi $t0, $t0, 1
    blt $t0, $a3, convolve_row_loop

    # Restore stack frame
    lw $ra, 0($sp)
    addi $sp, $sp, 4

    # Return
    jr $ra

convolve_sum:
    # Save $a0 on the stack
    addi $sp, $sp, -4
    sw $a0, 0($sp)

    # Initialize sum (64-bit)
    li $v0, 0           # Lower 32 bits of sum
    li $v1, 0           # Upper 32 bits of sum 

    # Iterate over kernel rows
    li $t4, 0 # kernel row index
convolve_kernel_row_loop:
    # Iterate over kernel columns
    li $t5, 0 # kernel column index
convolve_kernel_col_loop:
    # Calculate kernel element offset (CORRECTED)
    mul $t6, $t4, 4    # kernel row offset (multiple of 4)
    sll $t7, $t5, 2    # kernel column offset (multiply $t5 by 4)
    add $t6, $t6, $t7   # kernel element offset (always a multiple of 4 now) 

    # Load kernel element
    lw $t7, kernel($t6)

    # Calculate image pixel offset (BYTE offset)
    sub $t8, $t4, 1 # image row offset
    mul $t8, $t8, $a2 # image row offset
    sub $t9, $t5, 1 # image column offset
    add $t8, $t8, $t9 # image pixel offset
    add $t8, $t8, $a0 # add the base BYTE offset from $a0

    # Check if pixel offset is within image bounds
    blt $t8, 0, convolve_kernel_next
    li $t9, 899 # Calculate the maximum offset (30 * 30 - 1)
    bge $t8, $t9, convolve_kernel_next 

    # Load image pixel (using BYTE addressing)
    lbu $t9, image($t8) 

    # Multiply kernel element and image pixel (unsigned, 64-bit result)
    multu $t9, $t7  

    # Add lower 32 bits to sum
    mflo $t9         # Get the lower 32 bits of the multiplication
    addu $v0, $v0, $t9 # Add to the lower 32 bits of the sum
    bltz $v0, convolve_sum_overflow # Check for carry from lower to upper

    # Add upper 32 bits to sum
convolve_sum_no_overflow:
    mfhi $t9         # Get the upper 32 bits of the multiplication
    addu $v1, $v1, $t9 # Add to the upper 32 bits of the sum

convolve_kernel_next:
    # Increment kernel column index
    addi $t5, $t5, 1
    blt $t5, 4, convolve_kernel_col_loop

    # Increment kernel row index
    addi $t4, $t4, 1
    blt $t4, 4, convolve_kernel_row_loop

    # Check for overflow in the upper 32 bits
    bltz $v1, convolve_clamp_max

    # Move the lower 8 bits of the sum to $v0 for returning
    move $v0, $v0

    # Clamp sum to channel depth
    blt $v0, 0, convolve_clamp_min
    bgt $v0, $s7, convolve_clamp_max
    j convolve_clamp_done

convolve_sum_overflow:
    addiu $v1, $v1, 1 # Add carry to the upper 32 bits
    j convolve_sum_no_overflow

convolve_clamp_min:
    li $v0, 0
    j convolve_clamp_done

convolve_clamp_max:
    move $v0, $s7

convolve_clamp_done:
    # Restore $a0 from the stack
    lw $a0, 0($sp)
    addi $sp, $sp, 4

    # Return sum
    jr $ra
